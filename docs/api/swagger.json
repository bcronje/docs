{
  "openapi": "3.0.1",
  "info": {
    "title": "Enclave API",
    "description": "API for managing your Enclave resources.",
    "version": "v1"
  },
  "paths": {
    "/account/orgs": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get the organisations available to the authenticated user.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAccountOrgsResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAccountOrgsResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAccountOrgsResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get basic account information for the current user.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Update basic information on the account.",
        "requestBody": {
          "description": "The patch model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountPatchModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountPatchModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountPatchModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/account/password-update": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Change the user's password.",
        "requestBody": {
          "description": "The password change model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChangeModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChangeModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChangeModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/account/step-up": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create a new short-lived step-up token using the user's password. Required to invoke other sensitive account APIs.",
        "requestBody": {
          "description": "Input model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StepUpRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StepUpRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StepUpRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StepUpResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StepUpResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StepUpResponseModel"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/account/access-token": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create a new personal access token (requires step-up).",
        "requestBody": {
          "description": "Input model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccessTokenModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccessTokenModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccessTokenModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedTokenModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedTokenModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedTokenModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/account/access-token/{tokenRef}": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete an access token.",
        "parameters": [
          {
            "name": "tokenRef",
            "in": "path",
            "description": "The personal access token (retrievable from the basic account info that includes access tokens).",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The personal access token (retrievable from the basic account info that includes access tokens).",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/account/two-factor-qrcode": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Creates a QR code PNG data URI for the user's TOTP authenticator (requires step-up).",
        "requestBody": {
          "description": "The input model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorQrRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorQrRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorQrRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorQrResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorQrResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorQrResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/account/two-factor-recoverycodes": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Generate new recovery codes for a user's account (requires step-up).",
        "requestBody": {
          "description": "Input model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorRecoveryCodeRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorRecoveryCodeRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorRecoveryCodeRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorRecoveryCodeResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorRecoveryCodeResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorRecoveryCodeResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/account/two-factor-verify-code": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Verifies a two factor code (requires step-up).",
        "requestBody": {
          "description": "Input model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorCodeVerifyRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorCodeVerifyRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorCodeVerifyRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/account/two-factor-enable": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Enables two factor authentication on the account (requires step-up).",
        "requestBody": {
          "description": "Input model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorStateChangeModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorStateChangeModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorStateChangeModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/account/two-factor-disable": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Disables two factor authentication on the account (requires step-up).",
        "requestBody": {
          "description": "Input model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorStateChangeModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorStateChangeModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorStateChangeModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/account/invite/{orgId}/accept": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Accept an invitation to join an organisation.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The organisation ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/account/invite/{orgId}": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Decline an invitation to join an organisation.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The organisation ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountOrgInviteModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountOrgInviteModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountOrgInviteModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/authority": {
      "get": {
        "tags": [
          "Authority"
        ],
        "summary": "Get basic information about the signing authority.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorityInfoModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorityInfoModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorityInfoModel"
                }
              }
            }
          }
        }
      }
    },
    "/authority/enrol": {
      "post": {
        "tags": [
          "Authority"
        ],
        "summary": "Enrol a new system with Enclave, and get the cryptographic identity.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrolRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrolRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EnrolRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EnrolResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrolResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrolResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/org/{orgId}/enrolment-keys": {
      "get": {
        "tags": [
          "Enrolment Keys"
        ],
        "summary": "Get the Enrolment Keys for the account.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "include_disabled",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EnrolmentKeySortOrder"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Specifies the page number to retrieve.",
            "schema": {
              "maximum": 100000,
              "exclusiveMaximum": true,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the page number to retrieve.",
              "format": "int32",
              "default": 0,
              "nullable": true
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sets the number of items to return on each page.",
            "schema": {
              "maximum": 200,
              "minimum": 0,
              "type": "integer",
              "description": "Sets the number of items to return on each page.",
              "format": "int32",
              "default": 30,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleEnrolmentKeyModelPaginatedResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleEnrolmentKeyModelPaginatedResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleEnrolmentKeyModelPaginatedResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Enrolment Keys"
        ],
        "summary": "Create a new Enrolment Key.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The properties to use when creating the key.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrolmentKeyCreateModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrolmentKeyCreateModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EnrolmentKeyCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FullEnrolmentKeyModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullEnrolmentKeyModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullEnrolmentKeyModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/enrolment-keys/{enrolmentKeyId}": {
      "get": {
        "tags": [
          "Enrolment Keys"
        ],
        "summary": "Get a single Enrolment key.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enrolmentKeyId",
            "in": "path",
            "description": "The id of the enrolment key (this is a numeric value rather than the key used to enrol a system).",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the enrolment key (this is a numeric value rather than the key used to enrol a system).",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FullEnrolmentKeyModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullEnrolmentKeyModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullEnrolmentKeyModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Enrolment Keys"
        ],
        "summary": "Update an enrolment key.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enrolmentKeyId",
            "in": "path",
            "description": "The id of the enrolment key (this is a numeric value rather than the key used to enrol a system).",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the enrolment key (this is a numeric value rather than the key used to enrol a system).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The set of modifications. Any omitted values are not updated, but at least one change must be supplied.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrolmentKeyPatchModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrolmentKeyPatchModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EnrolmentKeyPatchModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FullEnrolmentKeyModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullEnrolmentKeyModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullEnrolmentKeyModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/enrolment-keys/{enrolmentKeyId}/enable": {
      "put": {
        "tags": [
          "Enrolment Keys"
        ],
        "summary": "Enable an enrolment key.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enrolmentKeyId",
            "in": "path",
            "description": "The id of the enrolment key (this is a numeric value rather than the key used to enrol a system).",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the enrolment key (this is a numeric value rather than the key used to enrol a system).",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FullEnrolmentKeyModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullEnrolmentKeyModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullEnrolmentKeyModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/enrolment-keys/{enrolmentKeyId}/disable": {
      "put": {
        "tags": [
          "Enrolment Keys"
        ],
        "summary": "Disable an enrolment key.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enrolmentKeyId",
            "in": "path",
            "description": "The id of the enrolment key (this is a numeric value rather than the key used to enrol a system).",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the enrolment key (this is a numeric value rather than the key used to enrol a system).",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FullEnrolmentKeyModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullEnrolmentKeyModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullEnrolmentKeyModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/enrolment-keys/enable": {
      "put": {
        "tags": [
          "Enrolment Keys"
        ],
        "summary": "Bulk enables multiple keys.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The numeric set of ids of the enrolment keys to enable.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkKeyActionModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkKeyActionModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkKeyActionModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkKeyActionResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkKeyActionResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkKeyActionResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/enrolment-keys/disable": {
      "put": {
        "tags": [
          "Enrolment Keys"
        ],
        "summary": "Bulk disables multiple keys.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The numeric set of ids of the enrolment keys to disable.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkKeyActionModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkKeyActionModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkKeyActionModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkKeyActionResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkKeyActionResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkKeyActionResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/logs": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Gets paginated activity logs.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Specifies the page number to retrieve.",
            "schema": {
              "maximum": 100000,
              "exclusiveMaximum": true,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the page number to retrieve.",
              "format": "int32",
              "default": 0,
              "nullable": true
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sets the number of items to return on each page.",
            "schema": {
              "maximum": 200,
              "minimum": 0,
              "type": "integer",
              "description": "Sets the number of items to return on each page.",
              "format": "int32",
              "default": 30,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryModelPaginatedResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryModelPaginatedResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryModelPaginatedResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}": {
      "get": {
        "tags": [
          "Organisation"
        ],
        "summary": "Get the basic properties of the organisation.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationPropertiesModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationPropertiesModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationPropertiesModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Organisation"
        ],
        "summary": "Update basic properties of the organisation.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The changes.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationPatchModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationPatchModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationPatchModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationPropertiesModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationPropertiesModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationPropertiesModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/users": {
      "get": {
        "tags": [
          "Organisation"
        ],
        "summary": "Get the users in the organisation.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationUsersModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationUsersModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationUsersModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/users/{accountId}": {
      "delete": {
        "tags": [
          "Organisation"
        ],
        "summary": "Remove a user from the organisation.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The account to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The account to remove."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationUser"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationUser"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationUser"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/invites": {
      "get": {
        "tags": [
          "Organisation"
        ],
        "summary": "Get the pending invitations for the organisation.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationPendingInvitesModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationPendingInvitesModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationPendingInvitesModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Organisation"
        ],
        "summary": "Invite a user to join your organisation.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganisationInviteModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganisationInviteModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganisationInviteModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationInviteModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationInviteModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationInviteModel"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Organisation"
        ],
        "summary": "Cancel a pending invitation.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteOrganisationInviteModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteOrganisationInviteModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteOrganisationInviteModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationInviteModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationInviteModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationInviteModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/pricing": {
      "get": {
        "tags": [
          "Organisation"
        ],
        "summary": "Get the pricing information for the organisation.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationPricingModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationPricingModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationPricingModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/upgrade": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Perform an account upgrade.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationRequestUpgradeModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationRequestUpgradeModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationRequestUpgradeModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationUpgradeResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationUpgradeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationUpgradeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/billingportal": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get a link that can be used to redirect to a billing management portal.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnUrl",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationBillingPortalUrlResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationBillingPortalUrlResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationBillingPortalUrlResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/policies": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get the Policies in the account.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "include_disabled",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PolicySortOrder"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Specifies the page number to retrieve.",
            "schema": {
              "maximum": 100000,
              "exclusiveMaximum": true,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the page number to retrieve.",
              "format": "int32",
              "default": 0,
              "nullable": true
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sets the number of items to return on each page.",
            "schema": {
              "maximum": 200,
              "minimum": 0,
              "type": "integer",
              "description": "Sets the number of items to return on each page.",
              "format": "int32",
              "default": 30,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModelPaginatedResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModelPaginatedResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModelPaginatedResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "Create a new policy.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyCreateModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyCreateModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "summary": "Permanently delete multiple policies.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The set of policies to revoke.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPolicyActionModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPolicyActionModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPolicyActionModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPolicyDeleteResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPolicyDeleteResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPolicyDeleteResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/policies/{policyId}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get a single policy.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "The id of the policy.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the policy.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Policies"
        ],
        "summary": "Update a policy.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "The id of the policy.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the policy.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The set of modifications. Any omitted values are not updated, but at least one change must be supplied.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyPatchModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyPatchModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyPatchModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "summary": "Delete a policy.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "The ID of the policy to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the policy to delete.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/policies/{policyId}/enable": {
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "Enable a policy.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "The id of the policy.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the policy.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/policies/{policyId}/disable": {
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "Disable a policy.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "The id of the policy.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the policy.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/policies/enable": {
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "Enable multiple policies.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The set of policies.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPolicyActionModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPolicyActionModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPolicyActionModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPolicyUpdateResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPolicyUpdateResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPolicyUpdateResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/policies/disable": {
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "Disable multiple policies.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The set of policies.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPolicyActionModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPolicyActionModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPolicyActionModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPolicyUpdateResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPolicyUpdateResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkPolicyUpdateResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/systems": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Get a paginated list of Enclave Systems attached to the account.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enrolment_key",
            "in": "query",
            "description": "Filter the set of retrieved systems to only those enrolled using the specified enrolment key.",
            "schema": {
              "type": "integer",
              "description": "Filter the set of retrieved systems to only those enrolled using the specified enrolment key.",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search for systems with a partial match on description and system ID.",
            "schema": {
              "type": "string",
              "description": "Search for systems with a partial match on description and system ID.",
              "nullable": true
            }
          },
          {
            "name": "include_disabled",
            "in": "query",
            "description": "Include disabled systems in the results.",
            "schema": {
              "type": "boolean",
              "description": "Include disabled systems in the results.",
              "nullable": true
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SystemQuerySortMode"
            }
          },
          {
            "name": "dns",
            "in": "query",
            "description": "Searches for systems that will answer to the specified DNS name.",
            "schema": {
              "type": "string",
              "description": "Searches for systems that will answer to the specified DNS name.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Specifies the page number to retrieve.",
            "schema": {
              "maximum": 100000,
              "exclusiveMaximum": true,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the page number to retrieve.",
              "format": "int32",
              "default": 0,
              "nullable": true
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sets the number of items to return on each page.",
            "schema": {
              "maximum": 200,
              "minimum": 0,
              "type": "integer",
              "description": "Sets the number of items to return on each page.",
              "format": "int32",
              "default": 30,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModelPaginatedResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModelPaginatedResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModelPaginatedResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Systems"
        ],
        "summary": "Permanently revoke multiple systems.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The set of systems to revoke.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSystemActionModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSystemActionModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSystemActionModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSystemRevokedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSystemRevokedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSystemRevokedResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/systems/{systemId}": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Get a single Enclave System given its Enclave identity.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "systemId",
            "in": "path",
            "description": "The system identity.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The system identity.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Systems"
        ],
        "summary": "Update the settings for a system.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "systemId",
            "in": "path",
            "description": "The id of the system.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the system.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The fields to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemPatchModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemPatchModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SystemPatchModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Systems"
        ],
        "summary": "Permanently revoke a system.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "systemId",
            "in": "path",
            "description": "The ID of the system to revoke.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the system to revoke.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/systems/{systemId}/enable": {
      "put": {
        "tags": [
          "Systems"
        ],
        "summary": "Enable a system.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "systemId",
            "in": "path",
            "description": "The id of the system.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the system.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/systems/{systemId}/disable": {
      "put": {
        "tags": [
          "Systems"
        ],
        "summary": "Disable a system.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "systemId",
            "in": "path",
            "description": "The id of the system.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the system.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemBasicModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/systems/enable": {
      "put": {
        "tags": [
          "Systems"
        ],
        "summary": "Enable multiple systems.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The set of systems.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSystemActionModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSystemActionModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSystemActionModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSystemUpdateResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSystemUpdateResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSystemUpdateResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/systems/disable": {
      "put": {
        "tags": [
          "Systems"
        ],
        "summary": "Disable multiple systems.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The set of systems.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSystemActionModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSystemActionModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSystemActionModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSystemUpdateResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSystemUpdateResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSystemUpdateResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/systems/{systemId}/dns-availability/{newName}": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Check how many other systems are using the specified DNS name.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "systemId",
            "in": "path",
            "description": "The id of the system to exclude from the check.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the system to exclude from the check.",
              "nullable": true
            }
          },
          {
            "name": "newName",
            "in": "path",
            "description": "The new name of the system.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The new name of the system.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDnsAvailabilityResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDnsAvailabilityResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDnsAvailabilityResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Query the set of known tags in the organisation.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TagQuerySortOrder"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Specifies the page number to retrieve.",
            "schema": {
              "maximum": 100000,
              "exclusiveMaximum": true,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the page number to retrieve.",
              "format": "int32",
              "default": 0,
              "nullable": true
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sets the number of items to return on each page.",
            "schema": {
              "maximum": 200,
              "minimum": 0,
              "type": "integer",
              "description": "Sets the number of items to return on each page.",
              "format": "int32",
              "default": 30,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagModelPaginatedResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModelPaginatedResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModelPaginatedResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/unapproved-systems": {
      "get": {
        "tags": [
          "Unapproved Systems"
        ],
        "summary": "Get a paginated list of Unapproved Enclave Systems attached to the account.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enrolment_key",
            "in": "query",
            "description": "Filter the set of retrieved systems to only those enrolled using the specified enrolment key.",
            "schema": {
              "type": "integer",
              "description": "Filter the set of retrieved systems to only those enrolled using the specified enrolment key.",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Specify a search value (checks the System ID and the Description).",
            "schema": {
              "type": "string",
              "description": "Specify a search value (checks the System ID and the Description).",
              "nullable": true
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specify the sort order of the returned results.",
            "schema": {
              "$ref": "#/components/schemas/UnapprovedSystemQuerySortMode"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Specifies the page number to retrieve.",
            "schema": {
              "maximum": 100000,
              "exclusiveMaximum": true,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the page number to retrieve.",
              "format": "int32",
              "default": 0,
              "nullable": true
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Sets the number of items to return on each page.",
            "schema": {
              "maximum": 200,
              "minimum": 0,
              "type": "integer",
              "description": "Sets the number of items to return on each page.",
              "format": "int32",
              "default": 30,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnapprovedSystemModelPaginatedResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnapprovedSystemModelPaginatedResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnapprovedSystemModelPaginatedResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Unapproved Systems"
        ],
        "summary": "Permanently decline multiple unapproved systems.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The set of systems to decline.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUnapprovedSystemActionModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUnapprovedSystemActionModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUnapprovedSystemActionModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkUnapprovedSystemDeclineResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkUnapprovedSystemDeclineResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkUnapprovedSystemDeclineResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/unapproved-systems/{systemId}": {
      "get": {
        "tags": [
          "Unapproved Systems"
        ],
        "summary": "Get a single unapproved Enclave System given its Enclave identity.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "systemId",
            "in": "path",
            "description": "The system identity.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The system identity.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnapprovedSystemModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnapprovedSystemModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnapprovedSystemModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Unapproved Systems"
        ],
        "summary": "Update the settings for an unapproved system.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "systemId",
            "in": "path",
            "description": "The id of the system.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the system.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The fields to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnapprovedSystemPatchModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UnapprovedSystemPatchModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UnapprovedSystemPatchModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnapprovedSystemModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnapprovedSystemModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnapprovedSystemModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Unapproved Systems"
        ],
        "summary": "Permanently decline an unapproved system.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "systemId",
            "in": "path",
            "description": "The id of the system.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the system.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnapprovedSystemModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnapprovedSystemModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnapprovedSystemModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/unapproved-systems/{systemId}/approve": {
      "put": {
        "tags": [
          "Unapproved Systems"
        ],
        "summary": "Approve a system.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "systemId",
            "in": "path",
            "description": "The id of the system.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the system.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/unapproved-systems/approve": {
      "put": {
        "tags": [
          "Unapproved Systems"
        ],
        "summary": "Approve multiple systems.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The set of systems to approve.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUnapprovedSystemActionModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUnapprovedSystemActionModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUnapprovedSystemActionModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkUnapprovedSystemApproveResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkUnapprovedSystemApproveResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkUnapprovedSystemApproveResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/org/{orgId}/unapproved-systems/{systemId}/dns-availability/{newName}": {
      "get": {
        "tags": [
          "Unapproved Systems"
        ],
        "summary": "Check how many other systems are using the specified DNS name.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organisation's API ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "systemId",
            "in": "path",
            "description": "The id of the system to exclude from the check.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the system to exclude from the check.",
              "nullable": true
            }
          },
          {
            "name": "newName",
            "in": "path",
            "description": "The new name of the system.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The new name of the system.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDnsAvailabilityResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDnsAvailabilityResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDnsAvailabilityResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request; ensure you have provided a valid Access Token with 'Authorization: Bearer {token}'."
          },
          "403": {
            "description": "The provided token does not grant rights to this request."
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "UserOrganisationRole": {
        "enum": [
          "Owner",
          "Admin"
        ],
        "type": "string"
      },
      "AccountOrganisationModel": {
        "required": [
          "orgId",
          "orgName",
          "role"
        ],
        "type": "object",
        "properties": {
          "orgId": {
            "type": "string",
            "readOnly": true
          },
          "orgName": {
            "type": "string",
            "readOnly": true
          },
          "role": {
            "$ref": "#/components/schemas/UserOrganisationRole"
          }
        },
        "additionalProperties": false
      },
      "QueryAccountOrgsResponseModel": {
        "required": [
          "orgs"
        ],
        "type": "object",
        "properties": {
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountOrganisationModel"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PersonalAccessTokenModel": {
        "required": [
          "description",
          "lastUsed",
          "reference"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "lastUsed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "reference": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AccountOrgInviteModel": {
        "required": [
          "invitedByEmail",
          "invitedByFirstName",
          "invitedByLastName",
          "orgId",
          "orgName"
        ],
        "type": "object",
        "properties": {
          "orgId": {
            "type": "string"
          },
          "orgName": {
            "type": "string"
          },
          "invitedByFirstName": {
            "type": "string",
            "nullable": true
          },
          "invitedByLastName": {
            "type": "string",
            "nullable": true
          },
          "invitedByEmail": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AccountInfoModel": {
        "required": [
          "emailNotificationsEnabled",
          "firstName",
          "id",
          "invites",
          "lastName",
          "memberSince",
          "tokens",
          "twoFactorEnabled",
          "userName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "twoFactorEnabled": {
            "type": "boolean"
          },
          "memberSince": {
            "type": "string",
            "format": "date-time"
          },
          "emailNotificationsEnabled": {
            "type": "boolean"
          },
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalAccessTokenModel"
            }
          },
          "invites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountOrgInviteModel"
            }
          }
        },
        "additionalProperties": false
      },
      "AccountPatchModel": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "emailNotificationsEnabled": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PasswordChangeModel": {
        "required": [
          "newPassword",
          "originalPassword"
        ],
        "type": "object",
        "properties": {
          "originalPassword": {
            "minLength": 1,
            "type": "string"
          },
          "newPassword": {
            "minLength": 8,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "required": [
          "detail",
          "instance",
          "status",
          "title",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          }
        },
        "additionalProperties": { }
      },
      "StepUpRequestModel": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "StepUpResponseModel": {
        "required": [
          "token",
          "validUntil"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CreateAccessTokenModel": {
        "required": [
          "description",
          "stepUpToken"
        ],
        "type": "object",
        "properties": {
          "stepUpToken": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "requestedScopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatedTokenModel": {
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TwoFactorQrRequestModel": {
        "required": [
          "stepUpToken"
        ],
        "type": "object",
        "properties": {
          "stepUpToken": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TwoFactorQrResponseModel": {
        "required": [
          "dataUri"
        ],
        "type": "object",
        "properties": {
          "dataUri": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TwoFactorRecoveryCodeRequestModel": {
        "required": [
          "stepUpToken"
        ],
        "type": "object",
        "properties": {
          "stepUpToken": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TwoFactorRecoveryCodeResponseModel": {
        "required": [
          "recoveryCodes"
        ],
        "type": "object",
        "properties": {
          "recoveryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "TwoFactorCodeVerifyRequestModel": {
        "required": [
          "code",
          "stepUpToken"
        ],
        "type": "object",
        "properties": {
          "stepUpToken": {
            "minLength": 1,
            "type": "string"
          },
          "code": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TwoFactorStateChangeModel": {
        "required": [
          "stepUpToken"
        ],
        "type": "object",
        "properties": {
          "stepUpToken": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AuthorityInfoModel": {
        "required": [
          "discoveryPublicKey",
          "intermediatePublicKey"
        ],
        "type": "object",
        "properties": {
          "intermediatePublicKey": {
            "type": "string",
            "readOnly": true
          },
          "discoveryPublicKey": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EnrolRequestModel": {
        "required": [
          "enrolmentKey",
          "nonce",
          "publicKey"
        ],
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "description": "A 256-bit (32 byte) public key for signing, in base-64."
          },
          "enrolmentKey": {
            "minLength": 1,
            "type": "string",
            "description": "An Enclave Enrolment Key."
          },
          "nonce": {
            "type": "string",
            "description": "A 256-bit (32 byte) nonce for the request, in base-64."
          },
          "notBefore": {
            "type": "integer",
            "description": "Unix epoch timestamp from which the certificate becomes valid.\r\nIf none provided, defaults to now.",
            "format": "int64",
            "nullable": true
          },
          "notAfter": {
            "type": "integer",
            "description": "Unix epoch timestamp until which the certificate is valid. If none provided, defaults to a permanent certificate.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CertificatePermittedUse": {
        "enum": [
          "None",
          "Endpoint",
          "Infrastructure",
          "Intermediate",
          "Root"
        ],
        "type": "string"
      },
      "EnrolResponseModel": {
        "required": [
          "issuerDistinguishedName",
          "issuerPublicKey",
          "notAfter",
          "notBefore",
          "permittedUse",
          "serialNumber",
          "signature",
          "subjectDistinguishedName",
          "subjectPublicKey",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "integer",
            "description": "The version number field denotes the version of the certificate.",
            "format": "int32",
            "readOnly": true
          },
          "serialNumber": {
            "type": "string",
            "description": "The unique serial number of the certificate assigned by the certification authority; the size of the serial number field is a 16 byte (128 bit) guid.",
            "format": "byte",
            "readOnly": true
          },
          "permittedUse": {
            "$ref": "#/components/schemas/CertificatePermittedUse"
          },
          "subjectDistinguishedName": {
            "type": "string",
            "description": "Unique system name assigned to the generated certificate. Used to identify the system in the rest of Enclave.",
            "readOnly": true
          },
          "subjectPublicKey": {
            "type": "string",
            "description": "Contains the provided public key.",
            "format": "byte",
            "readOnly": true
          },
          "notBefore": {
            "type": "integer",
            "description": "Unix epoch timestamp indicating the point from which this certificate is considered valid.",
            "format": "int64",
            "readOnly": true
          },
          "notAfter": {
            "type": "integer",
            "description": "Unix epoch timestamp indicating the point after which this certificate is no longer considered valid.",
            "format": "int64",
            "readOnly": true
          },
          "issuerDistinguishedName": {
            "type": "string",
            "description": "The name of the issuing authority.",
            "readOnly": true
          },
          "issuerPublicKey": {
            "type": "string",
            "description": "The public key of the issuing authority.",
            "format": "byte",
            "readOnly": true
          },
          "signature": {
            "type": "string",
            "description": "Signature of this certificate.",
            "format": "byte",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EnrolmentKeySortOrder": {
        "enum": [
          "Description",
          "LastUsed",
          "ApprovalMode",
          "UsesRemaining"
        ],
        "type": "string"
      },
      "PaginationMetadata": {
        "required": [
          "firstPage",
          "lastPage",
          "nextPage",
          "prevPage",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of items (across all pages).",
            "format": "int32",
            "readOnly": true
          },
          "firstPage": {
            "type": "integer",
            "description": "The first page number.",
            "format": "int32",
            "readOnly": true
          },
          "prevPage": {
            "type": "integer",
            "description": "The previous page number (null if this is the first page).",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "lastPage": {
            "type": "integer",
            "description": "The last page number.",
            "format": "int32",
            "readOnly": true
          },
          "nextPage": {
            "type": "integer",
            "description": "The next page number (null if this is the last page).",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Defines the metadata attached to a paginated response."
      },
      "PaginationLinks": {
        "required": [
          "first",
          "last",
          "next",
          "prev"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "description": "The first page of data.",
            "format": "uri",
            "readOnly": true
          },
          "prev": {
            "type": "string",
            "description": "The previous page of data (or null if this is the first page).",
            "format": "uri",
            "nullable": true,
            "readOnly": true
          },
          "next": {
            "type": "string",
            "description": "The next page of data (or null if this is the last page).",
            "format": "uri",
            "nullable": true,
            "readOnly": true
          },
          "last": {
            "type": "string",
            "description": "The last page of data.",
            "format": "uri",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Defines the available pagination links."
      },
      "ApprovalMode": {
        "enum": [
          "Automatic",
          "Manual"
        ],
        "type": "string"
      },
      "EnrolmentKeyStatus": {
        "enum": [
          "Disabled",
          "Enabled",
          "NoUsesRemaining"
        ],
        "type": "string"
      },
      "TagReferenceModel": {
        "required": [
          "tag"
        ],
        "type": "object",
        "properties": {
          "tag": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SimpleEnrolmentKeyModel": {
        "required": [
          "approvalMode",
          "created",
          "description",
          "enrolledCount",
          "id",
          "isEnabled",
          "key",
          "lastUsed",
          "status",
          "tags",
          "unapprovedCount",
          "usesRemaining"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "lastUsed": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "approvalMode": {
            "$ref": "#/components/schemas/ApprovalMode"
          },
          "status": {
            "$ref": "#/components/schemas/EnrolmentKeyStatus"
          },
          "key": {
            "type": "string",
            "description": "The key that can be used to enroll systems.",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The provided description of the key.",
            "readOnly": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Whether or not this key is enabled.",
            "readOnly": true
          },
          "usesRemaining": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "enrolledCount": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "unapprovedCount": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagReferenceModel"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a single Enclave Enrolment Key."
      },
      "SimpleEnrolmentKeyModelPaginatedResponseModel": {
        "required": [
          "items",
          "links",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginationMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleEnrolmentKeyModel"
            },
            "description": "The requested page of items.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Response model for paginated data."
      },
      "EnrolmentKeysRequestModel": {
        "type": "object",
        "properties": {
          "page": {
            "maximum": 100000,
            "exclusiveMaximum": true,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies the page number to retrieve.",
            "format": "int32",
            "default": 0,
            "nullable": true
          },
          "perPage": {
            "maximum": 200,
            "minimum": 0,
            "type": "integer",
            "description": "Sets the number of items to return on each page.",
            "format": "int32",
            "default": 30,
            "nullable": true
          },
          "search": {
            "type": "string",
            "nullable": true
          },
          "includeDisabled": {
            "type": "boolean",
            "nullable": true
          },
          "sort": {
            "$ref": "#/components/schemas/EnrolmentKeySortOrder"
          }
        },
        "additionalProperties": false
      },
      "EnrolmentKeyIpConstraintInputModel": {
        "required": [
          "description",
          "range"
        ],
        "type": "object",
        "properties": {
          "range": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EnrolmentKeyCreateModel": {
        "required": [
          "description"
        ],
        "type": "object",
        "properties": {
          "approvalMode": {
            "$ref": "#/components/schemas/ApprovalMode"
          },
          "description": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A description for the key you are creating."
          },
          "usesRemaining": {
            "type": "integer",
            "description": "The number of uses to start the key with. A value of -1 indicates no limit on the number of uses.",
            "format": "int32",
            "default": -1,
            "nullable": true
          },
          "ipConstraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnrolmentKeyIpConstraintInputModel"
            },
            "description": "The set of IP Address constraints on the key.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A set of tags automatically applied to systems enrolled with this key.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data required to create a new enrolment key."
      },
      "FullEnrolmentKeyModel": {
        "required": [
          "approvalMode",
          "created",
          "description",
          "enrolledCount",
          "id",
          "ipConstraints",
          "isEnabled",
          "key",
          "lastUsed",
          "status",
          "tags",
          "unapprovedCount",
          "usesRemaining"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "lastUsed": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "approvalMode": {
            "$ref": "#/components/schemas/ApprovalMode"
          },
          "status": {
            "$ref": "#/components/schemas/EnrolmentKeyStatus"
          },
          "key": {
            "type": "string",
            "description": "The key that can be used to enroll systems.",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The provided description of the key.",
            "readOnly": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Whether or not this key is enabled.",
            "readOnly": true
          },
          "usesRemaining": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "enrolledCount": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "unapprovedCount": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagReferenceModel"
            },
            "readOnly": true
          },
          "ipConstraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnrolmentKeyIpConstraintInputModel"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a single Enclave Enrolment Key."
      },
      "EnrolmentKeyPatchModel": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "approvalMode": {
            "$ref": "#/components/schemas/ApprovalMode"
          },
          "usesRemaining": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ipConstraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnrolmentKeyIpConstraintInputModel"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkKeyActionModel": {
        "required": [
          "keyIds"
        ],
        "type": "object",
        "properties": {
          "keyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "additionalProperties": false
      },
      "BulkKeyActionResult": {
        "required": [
          "keysModified"
        ],
        "type": "object",
        "properties": {
          "keysModified": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ActivityLogLevel": {
        "enum": [
          "Information",
          "Warning",
          "Error"
        ],
        "type": "string"
      },
      "LogEntryModel": {
        "required": [
          "ipAddress",
          "level",
          "message",
          "timeStamp",
          "userName"
        ],
        "type": "object",
        "properties": {
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "level": {
            "$ref": "#/components/schemas/ActivityLogLevel"
          },
          "message": {
            "type": "string"
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "ipAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogEntryModelPaginatedResponseModel": {
        "required": [
          "items",
          "links",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginationMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogEntryModel"
            },
            "description": "The requested page of items.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Response model for paginated data."
      },
      "LogsRequestModel": {
        "type": "object",
        "properties": {
          "page": {
            "maximum": 100000,
            "exclusiveMaximum": true,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies the page number to retrieve.",
            "format": "int32",
            "default": 0,
            "nullable": true
          },
          "perPage": {
            "maximum": 200,
            "minimum": 0,
            "type": "integer",
            "description": "Sets the number of items to return on each page.",
            "format": "int32",
            "default": 30,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganisationPlan": {
        "enum": [
          "Community",
          "Solo",
          "Teams"
        ],
        "type": "string"
      },
      "OrganisationPropertiesModel": {
        "required": [
          "created",
          "enrolledSystems",
          "id",
          "maxSystems",
          "name",
          "phone",
          "plan",
          "unapprovedSystems",
          "website"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "plan": {
            "$ref": "#/components/schemas/OrganisationPlan"
          },
          "website": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "maxSystems": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "enrolledSystems": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "unapprovedSystems": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "OrganisationPatchModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganisationUser": {
        "required": [
          "emailAddress",
          "firstName",
          "id",
          "joinDate",
          "lastName",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "emailAddress": {
            "type": "string",
            "readOnly": true
          },
          "firstName": {
            "type": "string",
            "readOnly": true
          },
          "lastName": {
            "type": "string",
            "readOnly": true
          },
          "joinDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "role": {
            "$ref": "#/components/schemas/UserOrganisationRole"
          }
        },
        "additionalProperties": false
      },
      "OrganisationUsersModel": {
        "required": [
          "users"
        ],
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganisationUser"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "OrganisationInviteModel": {
        "required": [
          "emailAddress"
        ],
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "description": "The email address of the user to invite."
          }
        },
        "additionalProperties": false
      },
      "OrganisationPendingInvitesModel": {
        "required": [
          "invites"
        ],
        "type": "object",
        "properties": {
          "invites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganisationInviteModel"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CreateOrganisationInviteModel": {
        "required": [
          "emailAddress"
        ],
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "format": "email"
          }
        },
        "additionalProperties": false
      },
      "DeleteOrganisationInviteModel": {
        "required": [
          "emailAddress"
        ],
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "format": "email"
          }
        },
        "additionalProperties": false
      },
      "PlanPricingQuantity": {
        "required": [
          "capacity",
          "isDefault",
          "price"
        ],
        "type": "object",
        "properties": {
          "capacity": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "price": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "isDefault": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OrganisationPlanPricing": {
        "required": [
          "currencySymbol",
          "enabled",
          "quantities"
        ],
        "type": "object",
        "properties": {
          "currencySymbol": {
            "type": "string",
            "readOnly": true
          },
          "enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "quantities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanPricingQuantity"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BillingEventLevel": {
        "enum": [
          "Information",
          "Warning",
          "Error"
        ],
        "type": "string"
      },
      "OrganisationBillingEvent": {
        "required": [
          "code",
          "level",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "readOnly": true
          },
          "message": {
            "type": "string",
            "readOnly": true
          },
          "level": {
            "$ref": "#/components/schemas/BillingEventLevel"
          }
        },
        "additionalProperties": false
      },
      "OrganisationPricingModel": {
        "required": [
          "community",
          "lastBillingEvent",
          "solo",
          "teams"
        ],
        "type": "object",
        "properties": {
          "community": {
            "$ref": "#/components/schemas/OrganisationPlanPricing"
          },
          "solo": {
            "$ref": "#/components/schemas/OrganisationPlanPricing"
          },
          "teams": {
            "$ref": "#/components/schemas/OrganisationPlanPricing"
          },
          "lastBillingEvent": {
            "$ref": "#/components/schemas/OrganisationBillingEvent"
          }
        },
        "additionalProperties": false
      },
      "OrganisationRequestUpgradeModel": {
        "required": [
          "cancelRedirectUrl",
          "newCapacity",
          "successRedirectUrl"
        ],
        "type": "object",
        "properties": {
          "plan": {
            "$ref": "#/components/schemas/OrganisationPlan"
          },
          "newCapacity": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "format": "int32"
          },
          "successRedirectUrl": {
            "type": "string"
          },
          "cancelRedirectUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "OrganisationUpgradeResponse": {
        "required": [
          "organisation",
          "pricing",
          "stripePublicKey",
          "stripeSessionId"
        ],
        "type": "object",
        "properties": {
          "stripePublicKey": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "stripeSessionId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "organisation": {
            "$ref": "#/components/schemas/OrganisationPropertiesModel"
          },
          "pricing": {
            "$ref": "#/components/schemas/OrganisationPricingModel"
          }
        },
        "additionalProperties": false
      },
      "OrganisationBillingPortalUrlResponse": {
        "required": [
          "redirectUrl"
        ],
        "type": "object",
        "properties": {
          "redirectUrl": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PolicySortOrder": {
        "enum": [
          "Description",
          "RecentlyCreated"
        ],
        "type": "string"
      },
      "PolicyModel": {
        "required": [
          "created",
          "description",
          "id",
          "isEnabled",
          "receiverTags",
          "senderTags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The provided description of the key.",
            "readOnly": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Whether or not this key is enabled.",
            "readOnly": true
          },
          "senderTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagReferenceModel"
            },
            "description": "The sender-side tags.",
            "readOnly": true
          },
          "receiverTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagReferenceModel"
            },
            "description": "The receiver-side tags.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a single policy."
      },
      "PolicyModelPaginatedResponseModel": {
        "required": [
          "items",
          "links",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginationMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyModel"
            },
            "description": "The requested page of items.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Response model for paginated data."
      },
      "PoliciesRequestModel": {
        "type": "object",
        "properties": {
          "page": {
            "maximum": 100000,
            "exclusiveMaximum": true,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies the page number to retrieve.",
            "format": "int32",
            "default": 0,
            "nullable": true
          },
          "perPage": {
            "maximum": 200,
            "minimum": 0,
            "type": "integer",
            "description": "Sets the number of items to return on each page.",
            "format": "int32",
            "default": 30,
            "nullable": true
          },
          "search": {
            "type": "string",
            "nullable": true
          },
          "includeDisabled": {
            "type": "boolean",
            "nullable": true
          },
          "sort": {
            "$ref": "#/components/schemas/PolicySortOrder"
          }
        },
        "additionalProperties": false
      },
      "PolicyCreateModel": {
        "required": [
          "description",
          "isEnabled",
          "receiverTags",
          "senderTags"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A description for the key you are creating."
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Whether or not the policy is initially enabled.",
            "default": true
          },
          "senderTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A set of sender tags."
          },
          "receiverTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A set of receiver tags."
          }
        },
        "additionalProperties": false,
        "description": "Data required to create a new enrolment key."
      },
      "BulkPolicyActionModel": {
        "required": [
          "policyIds"
        ],
        "type": "object",
        "properties": {
          "policyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "additionalProperties": false
      },
      "BulkPolicyDeleteResult": {
        "required": [
          "policiesDeleted"
        ],
        "type": "object",
        "properties": {
          "policiesDeleted": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PolicyPatchModel": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "senderTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "receiverTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkPolicyUpdateResult": {
        "required": [
          "policiesUpdated"
        ],
        "type": "object",
        "properties": {
          "policiesUpdated": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SystemQuerySortMode": {
        "enum": [
          "RecentlyEnrolled",
          "RecentlyConnected",
          "Description",
          "EnrolmentKeyUsed"
        ],
        "type": "string"
      },
      "SystemState": {
        "enum": [
          "Disabled",
          "Disconnected",
          "Connected"
        ],
        "type": "string"
      },
      "SystemBasicModel": {
        "required": [
          "connectedFrom",
          "customDns",
          "description",
          "enclaveVersion",
          "enrolledAt",
          "enrolmentKeyDescription",
          "enrolmentKeyId",
          "hostname",
          "isEnabled",
          "lastSeen",
          "osVersion",
          "platformType",
          "state",
          "systemId",
          "tags"
        ],
        "type": "object",
        "properties": {
          "systemId": {
            "type": "string",
            "description": "Unique ID for the System.",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The configured description of the system.",
            "nullable": true,
            "readOnly": true
          },
          "state": {
            "$ref": "#/components/schemas/SystemState"
          },
          "customDns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Any custom DNS names applied to the system.",
            "readOnly": true
          },
          "lastSeen": {
            "type": "string",
            "description": "Indicates a UTC timestamp when Enclave last interacted with the system.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "enrolledAt": {
            "type": "string",
            "description": "Contains a timestamp indicating when the system was enrolled into the account.",
            "format": "date-time",
            "readOnly": true
          },
          "enrolmentKeyId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "enrolmentKeyDescription": {
            "type": "string",
            "readOnly": true
          },
          "isEnabled": {
            "type": "boolean",
            "readOnly": true
          },
          "connectedFrom": {
            "type": "string",
            "description": "The IP address the system is connected from.",
            "nullable": true,
            "readOnly": true
          },
          "hostname": {
            "type": "string",
            "description": "The locally-defined host name of the system.",
            "nullable": true,
            "readOnly": true
          },
          "platformType": {
            "type": "string",
            "description": "The platform type for this system; possible values are Windows, Linux or MacOSX.",
            "nullable": true,
            "readOnly": true
          },
          "osVersion": {
            "type": "string",
            "description": "The version of the operating system.",
            "nullable": true,
            "readOnly": true
          },
          "enclaveVersion": {
            "type": "string",
            "description": "The Enclave product version.",
            "nullable": true,
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagReferenceModel"
            },
            "description": "The tags assigned to the system.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SystemBasicModelPaginatedResponseModel": {
        "required": [
          "items",
          "links",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginationMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SystemBasicModel"
            },
            "description": "The requested page of items.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Response model for paginated data."
      },
      "SystemsRequestModel": {
        "type": "object",
        "properties": {
          "page": {
            "maximum": 100000,
            "exclusiveMaximum": true,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies the page number to retrieve.",
            "format": "int32",
            "default": 0,
            "nullable": true
          },
          "perPage": {
            "maximum": 200,
            "minimum": 0,
            "type": "integer",
            "description": "Sets the number of items to return on each page.",
            "format": "int32",
            "default": 30,
            "nullable": true
          },
          "enrolmentKey": {
            "type": "integer",
            "description": "Filter the set of retrieved systems to only those enrolled using the specified enrolment key.",
            "format": "int32",
            "nullable": true
          },
          "search": {
            "type": "string",
            "description": "Search for systems with a partial match on description and system ID.",
            "nullable": true
          },
          "includeDisabled": {
            "type": "boolean",
            "description": "Include disabled systems in the results.",
            "nullable": true
          },
          "sortMode": {
            "$ref": "#/components/schemas/SystemQuerySortMode"
          },
          "dnsName": {
            "type": "string",
            "description": "Searches for systems that will answer to the specified DNS name.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkSystemActionModel": {
        "required": [
          "systemIds"
        ],
        "type": "object",
        "properties": {
          "systemIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "BulkSystemRevokedResult": {
        "required": [
          "systemsRevoked"
        ],
        "type": "object",
        "properties": {
          "systemsRevoked": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SystemPatchModel": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "customDns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkSystemUpdateResult": {
        "required": [
          "systemsUpdated"
        ],
        "type": "object",
        "properties": {
          "systemsUpdated": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SystemDnsAvailabilityResult": {
        "required": [
          "enrolledNameUsageCount",
          "unapprovedNameUsageCount"
        ],
        "type": "object",
        "properties": {
          "enrolledNameUsageCount": {
            "type": "integer",
            "format": "int32"
          },
          "unapprovedNameUsageCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TagQuerySortOrder": {
        "enum": [
          "Alphabetical",
          "RecentlyUsed",
          "ReferencedSystems"
        ],
        "type": "string"
      },
      "TagModel": {
        "required": [
          "keys",
          "lastReferenced",
          "policies",
          "systems",
          "tag"
        ],
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "readOnly": true
          },
          "lastReferenced": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "systems": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "keys": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "policies": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TagModelPaginatedResponseModel": {
        "required": [
          "items",
          "links",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginationMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagModel"
            },
            "description": "The requested page of items.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Response model for paginated data."
      },
      "TagsRequestModel": {
        "type": "object",
        "properties": {
          "page": {
            "maximum": 100000,
            "exclusiveMaximum": true,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies the page number to retrieve.",
            "format": "int32",
            "default": 0,
            "nullable": true
          },
          "perPage": {
            "maximum": 200,
            "minimum": 0,
            "type": "integer",
            "description": "Sets the number of items to return on each page.",
            "format": "int32",
            "default": 30,
            "nullable": true
          },
          "search": {
            "type": "string",
            "nullable": true
          },
          "sort": {
            "$ref": "#/components/schemas/TagQuerySortOrder"
          }
        },
        "additionalProperties": false
      },
      "UnapprovedSystemQuerySortMode": {
        "enum": [
          "RecentlyEnrolled",
          "Description",
          "EnrolmentKeyUsed"
        ],
        "type": "string"
      },
      "UnapprovedSystemModel": {
        "required": [
          "connectedFrom",
          "customDns",
          "description",
          "enclaveVersion",
          "enrolledAt",
          "enrolledFrom",
          "enrolmentKeyDescription",
          "enrolmentKeyId",
          "hostname",
          "osVersion",
          "platformType",
          "systemId",
          "tags"
        ],
        "type": "object",
        "properties": {
          "systemId": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "enrolledFrom": {
            "type": "string",
            "readOnly": true
          },
          "enrolledAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "customDns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Any custom DNS names applied to the system.",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagReferenceModel"
            },
            "readOnly": true
          },
          "enrolmentKeyId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "enrolmentKeyDescription": {
            "type": "string",
            "readOnly": true
          },
          "hostname": {
            "type": "string",
            "description": "The locally-defined host name of the system.",
            "nullable": true,
            "readOnly": true
          },
          "platformType": {
            "type": "string",
            "description": "The platform type for this system; possible values are Windows, Linux or MacOSX.",
            "nullable": true,
            "readOnly": true
          },
          "osVersion": {
            "type": "string",
            "description": "The version of the operating system.",
            "nullable": true,
            "readOnly": true
          },
          "enclaveVersion": {
            "type": "string",
            "description": "The Enclave product version.",
            "nullable": true,
            "readOnly": true
          },
          "connectedFrom": {
            "type": "string",
            "description": "The IP address the system is connected from.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UnapprovedSystemModelPaginatedResponseModel": {
        "required": [
          "items",
          "links",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginationMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnapprovedSystemModel"
            },
            "description": "The requested page of items.",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Response model for paginated data."
      },
      "UnapprovedSystemsRequestModel": {
        "type": "object",
        "properties": {
          "page": {
            "maximum": 100000,
            "exclusiveMaximum": true,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies the page number to retrieve.",
            "format": "int32",
            "default": 0,
            "nullable": true
          },
          "perPage": {
            "maximum": 200,
            "minimum": 0,
            "type": "integer",
            "description": "Sets the number of items to return on each page.",
            "format": "int32",
            "default": 30,
            "nullable": true
          },
          "enrolmentKey": {
            "type": "integer",
            "description": "Filter the set of retrieved systems to only those enrolled using the specified enrolment key.",
            "format": "int32",
            "nullable": true
          },
          "search": {
            "type": "string",
            "description": "Specify a search value (checks the System ID and the Description).",
            "nullable": true
          },
          "sort": {
            "$ref": "#/components/schemas/UnapprovedSystemQuerySortMode"
          }
        },
        "additionalProperties": false
      },
      "BulkUnapprovedSystemActionModel": {
        "required": [
          "systemIds"
        ],
        "type": "object",
        "properties": {
          "systemIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "BulkUnapprovedSystemDeclineResult": {
        "required": [
          "systemsDeclined"
        ],
        "type": "object",
        "properties": {
          "systemsDeclined": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UnapprovedSystemPatchModel": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "customDns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkUnapprovedSystemApproveResult": {
        "required": [
          "systemsApproved"
        ],
        "type": "object",
        "properties": {
          "systemsApproved": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Authorization Header using your Personal Access Token. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}